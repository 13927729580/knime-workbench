<?xml version="1.0"?>

<project name="Konstanz Information Miner documentation" default="docbook2eclipse">

    <description>
       Creates the documentation (plain html and eclipse-style) from the docbook source
    </description>

    <!-- load properties -->
    <property file="settings.properties" />

    <!-- the calsspath that is used by the transformer -->
    <path id="transformer.classpath">
        <fileset dir="${saxon.base.path}">
            <include name="**/*.jar" />
        </fileset>
        <filelist dir="${docbook.xsl.path}/extensions" files="saxon652.jar" />
        <path location="${docbook.xsl.custom.path}" />

        <fileset dir="${lib.path}/xml-commons-resolver-1.1/">
            <include name="**/*.jar" />
        </fileset>

        <fileset dir="${fop.base.path}">
            <include name="**/*.jar" />
        </fileset>
    </path>



    <target name="init">
        <mkdir dir="${build.path}" />
        <mkdir dir="${build.html.path}" />
        <mkdir dir="${build.xhtml.path}" />
        <mkdir dir="${build.pdf.path}" />
        <mkdir dir="${build.hh.path}" />
        <mkdir dir="${build.eclipse.path}" />

    </target>

    <!--
      Make clean
      -->
    <target name="clean">
        <delete dir="${build.path}" includes="**/*" />
    </target>


    <!-- - - - - - - - - - - - - - - - - - 
          Clean & rebuild all output formats
         - - - - - - - - - - - - - - - - - -->
    <target name="all" depends="init,clean,docbook2html,docbook2eclipse,docbook2pdf,docbook2hh">

    </target>




    <!-- - - - - - - - - - - - - - - - - - 
          Create html from docbook sources                      
         - - - - - - - - - - - - - - - - - -->
    <target name="docbook2html" depends="init">

        <java classname="com.icl.saxon.StyleSheet" fork="true">

            <classpath refid="transformer.classpath" />

            <arg value="-x" />
            <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
            <arg value="-y" />
            <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
            <arg value="-r" />
            <arg value="org.apache.xml.resolver.tools.CatalogResolver" />

            <arg value="-o" />
            <arg value="${build.html.file}" />

            <arg value="${source.book}" />
            <arg value="${xslt.html}" />

        </java>


    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
	          Create xhtml from docbook sources                      
	         - - - - - - - - - - - - - - - - - -->
	    <target name="docbook2xhtml" depends="init">

	        <java classname="com.icl.saxon.StyleSheet" fork="true">

	            <classpath refid="transformer.classpath" />

	            <arg value="-x" />
	            <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
	            <arg value="-y" />
	            <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
	            <arg value="-r" />
	            <arg value="org.apache.xml.resolver.tools.CatalogResolver" />

	            <arg value="-o" />
	            <arg value="${build.html.file}" />

	            <arg value="${source.book}" />
	            <arg value="${xslt.html}" />

	        </java>


	    </target>


    <!-- - - - - - - - - - - - - - - - - - 
          Create eclipse-html from docbook sources                      
         - - - - - - - - - - - - - - - - - -->
    <target name="docbook2eclipse" depends="init">

        <java classname="com.icl.saxon.StyleSheet" fork="true">
            <classpath refid="transformer.classpath" />
            <arg value="-x" />
            <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
            <arg value="-y" />
            <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
            <arg value="-r" />
            <arg value="org.apache.xml.resolver.tools.CatalogResolver" />
            <arg value="${source.book}" />
            <arg value="${xslt.eclipse}" />
            <arg value="base.dir=${build.eclipse.path}/" />
        </java>

        <!-- Delete the plugin.xml file in the base.dir, as this is managed by hand -->
        <delete file="${build.eclipse.path}/plugin.xml" />

        <!-- move toc.xml to plugin base dir -->
        <move file="${build.eclipse.path}/toc.xml" tofile="${base.path}/toc.xml" />

        <!-- copy images -->
        <copy todir="${build.eclipse.path}/images">
            <fileset dir="${images.path}">
                <include name="*/**" />
            </fileset>
        </copy>
        <!-- copy .css file -->
        <copy file="${custom.eclipse.css}" todir="${build.eclipse.path}/css" />

        <!-- Zip all the contents to doc.zip -->
        <zip destfile="${base.path}/doc.zip">
            <fileset dir="${build.eclipse.path}">
                <include name="**/*" />
            </fileset>

            <!-- we'll need to add the context help ("info pop") descriptor as well -->
            <fileset dir="${base.path}">
                <include name="context_help.xml" />
            </fileset>

        </zip>

    </target>



    <!-- - - - - - - - - - - - - - - - - - 
          Create pdf from docbook sources                      
         - - - - - - - - - - - - - - - - - -->
    <target name="docbook2pdf" depends="init">

        <java classname="com.icl.saxon.StyleSheet" fork="true">

            <classpath refid="transformer.classpath" />

            <arg value="-x" />
            <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
            <arg value="-y" />
            <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
            <arg value="-r" />
            <arg value="org.apache.xml.resolver.tools.CatalogResolver" />

            <arg value="-o" />
            <arg value="${build.fo.file}" />

            <arg value="${source.book}" />
            <arg value="${xslt.fo}" />

        </java>


        <!-- call fop to transform -->
        <java classname="org.apache.fop.apps.Fop" fork="yes">
            <classpath refid="transformer.classpath" />

            <arg value="${build.fo.file}" />
            <arg value="${build.pdf.file}" />
        </java>


    </target>


    <!-- - - - - - - - - - - - - - - - - - 
          Create MS HTML-Help from docbook sources                      
         - - - - - - - - - - - - - - - - - -->
    <target name="docbook2hh" depends="init">

        <java classname="com.icl.saxon.StyleSheet" fork="true">

            <classpath refid="transformer.classpath" />

            <arg value="-x" />
            <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
            <arg value="-y" />
            <arg value="org.apache.xml.resolver.tools.ResolvingXMLReader" />
            <arg value="-r" />
            <arg value="org.apache.xml.resolver.tools.CatalogResolver" />

            <!--     <arg value="-o" />
            <arg value="${build.hh.file}" />
            -->

            <arg value="${source.book}" />
            <arg value="${xslt.hh}" />

            <arg value="base.dir=" />
            <arg value="htmlhelp.chm=" />
            <arg value="htmlhelp.hhc=" />
            <arg value="htmlhelp.hhc=" />

        </java>

        <exec command="${hh.compiler.exe}">
            <arg value="${build.hh.file}" />
        </exec>


    </target>



</project>
